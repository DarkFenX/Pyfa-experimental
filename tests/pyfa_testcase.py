#===============================================================================
# Copyright (C) 2015 Anton Vorobyov
#
# This file is part of Pyfa 3.
#
# Pyfa 3 is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Pyfa 3 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Pyfa 3. If not, see <http://www.gnu.org/licenses/>.
#===============================================================================


import os
import sys
from logging import getLogger, DEBUG
from logging.handlers import BufferingHandler
from unittest import TestCase


runner_dir = os.path.dirname(os.path.abspath(sys.modules['__main__'].__file__))


class TestLogHandler(BufferingHandler):
    """
    Custom logging handler class which helps to
    check log output without unnecessary actual
    output.
    """
    def __init__(self):
        # Capacity is zero, as we won't rely on
        # it when deciding when to flush data
        BufferingHandler.__init__(self, 0)

    def shouldFlush(self, *args):
        return False

    def emit(self, record):
        self.buffer.append(record)


class PyfaTestCase(TestCase):
    """
    Custom test case class, which incorporates several
    environment changes for ease of test process, namely:

    self.log -- access to output generated by logging
    facility during test

    When overriding setUp and tearDown methods, make sure
    to call this class' original methods (before anything
    else is done for setUp, and after for tearDown).
    """

    def setUp(self):
        logger = getLogger()
        # Save existing data about logging system (log level and handlers)
        self.__old_loglevel = logger.getEffectiveLevel()
        logger.setLevel(DEBUG)
        self.__removed_log_handlers = []
        for handler in logger.handlers:
            self.__removed_log_handlers.append(handler)
            logger.removeHandler(handler)
        # Place test logger instead of them
        self.__test_log_handler = TestLogHandler()
        logger.addHandler(self.__test_log_handler)

    def tearDown(self):
        # Remove test logger and restore loggers which
        # were removed during setup
        logger = getLogger()
        logger.removeHandler(self.__test_log_handler)
        self.__test_log_handler.close()
        for handler in self.__removed_log_handlers:
            logger.addHandler(handler)
        logger.setLevel(self.__old_loglevel)

    @property
    def log(self):
        return self.__test_log_handler.buffer

    @property
    def evedb_path(self):
        return os.path.join(runner_dir, '..', 'staticdata', 'canned.db')

    @property
    def pyfadb_path(self):
        return os.path.join(runner_dir, '..', 'userdata', 'tests.db')
